#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform PushConsts {
    uint M;
    uint N;
    uint K;
} pc;

layout(set = 0, binding = 0) buffer A { float a[]; };
layout(set = 0, binding = 1) buffer B { float b[]; };
layout(set = 0, binding = 2) buffer C { float c[]; };

// tile size must match local_size_x/y
const uint TILE_SIZE = 16;

shared float Asub[TILE_SIZE][TILE_SIZE];
shared float Bsub[TILE_SIZE][TILE_SIZE];

void main() {
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;

    uint localRow = gl_LocalInvocationID.y;
    uint localCol = gl_LocalInvocationID.x;

    if (row >= pc.M || col >= pc.N) return;

    float sum = 0.0;

    for (uint t = 0; t < (pc.K + TILE_SIZE - 1) / TILE_SIZE; ++t) {
        // 读取 A 的子块（tile）到共享内存
        uint tiledACol = t * TILE_SIZE + localCol;
        if (row < pc.M && tiledACol < pc.K)
        Asub[localRow][localCol] = a[row * pc.K + tiledACol];
        else
        Asub[localRow][localCol] = 0.0;

        // 读取 B 的子块（tile）到共享内存
        uint tiledBRow = t * TILE_SIZE + localRow;
        if (tiledBRow < pc.K && col < pc.N)
        Bsub[localRow][localCol] = b[tiledBRow * pc.N + col];
        else
        Bsub[localRow][localCol] = 0.0;

        // 同步线程，确保共享内存填充完毕
        memoryBarrierShared();
        barrier();

        // 子块乘加
        for (uint k = 0; k < TILE_SIZE; ++k) {
            sum += Asub[localRow][k] * Bsub[k][localCol];
        }

        // 再次同步，准备下一轮 tile 加载
        barrier();
    }

    // 写入结果
    c[row * pc.N + col] = sum;
}